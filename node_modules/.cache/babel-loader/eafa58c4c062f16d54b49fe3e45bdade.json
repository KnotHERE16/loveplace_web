{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Dev/mern/frontend/src/shared/components/formUI/Input.js\";\nimport React, { useReducer } from 'react';\nimport './Input.css';\nimport { validate } from '../../util/validators';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: \"\",\n    isTouched: false,\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 57\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/kelvin/Dev/mern/frontend/src/shared/components/formUI/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","changeHandler","event","target","touchHandler","element","id","placeholder","rows","label","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,QAAgC,OAAhC;AAEA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAClC,UAAOA,MAAM,CAACC,IAAd;AACG,SAAK,QAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFX;AAGHC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAcH,MAAM,CAACK,UAArB;AAHd,OAAP;;AAKJ,SAAK,OAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,SAAS,EAAC;AAFL,OAAP;;AAIF;AACI,aAAOP,KAAP;AAbP;AAeJ,CAhBD;;AAiBA,MAAMQ,KAAK,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBd,UAAU,CAACE,YAAD,EAAe;AACtDI,IAAAA,KAAK,EAAE,EAD+C;AAEtDI,IAAAA,SAAS,EAAE,KAF2C;AAGtDF,IAAAA,OAAO,EAAE;AAH6C,GAAf,CAAzC;;AAMA,QAAMO,aAAa,GAAGC,KAAK,IAAI;AAC3BF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAFX;AAGPG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHX,KAAD,CAAR;AAMH,GAPD;;AASA,QAAMS,YAAY,GAAGF,KAAK,IAAI;AAC5BF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAES,KAAK,CAACC,MAAN,CAAaX,KAFX;AAGPG,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHX,KAAD,CAAR;AAKD,GAND;;AAOA,QAAMU,OAAO,GACXP,KAAK,CAACO,OAAN,KAAkB,OAAlB,gBACE;AACE,IAAA,EAAE,EAAEP,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACP,IAFd;AAGE,IAAA,WAAW,EAAEO,KAAK,CAACS,WAHrB;AAIE,IAAA,QAAQ,EAAEN,aAJZ;AAKE,IAAA,MAAM,EAAEG,YALV;AAME,IAAA,KAAK,EAAEL,UAAU,CAACP,KANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBAUE;AACE,IAAA,EAAE,EAAEM,KAAK,CAACQ,EADZ;AAEE,IAAA,IAAI,EAAER,KAAK,CAACU,IAAN,IAAc,CAFtB;AAGE,IAAA,QAAQ,EAAEP,aAHZ;AAIE,IAAA,MAAM,EAAEG,YAJV;AAKE,IAAA,KAAK,EAAEL,UAAU,CAACP,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ;AAqBA,sBAAO;AAAK,IAAA,SAAS,EAAI,gBAAe,CAACO,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,IAA+C,uBAAwB,EAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAO,IAAA,OAAO,EAAEE,KAAK,CAACQ,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BR,KAAK,CAACW,KAAjC,CADG,EAEFJ,OAFE,EAGF,CAACN,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,KAAK,CAACY,SAAV,CAH7C,CAAP;AAKH,CAlDD;;AAoDA,eAAeb,KAAf","sourcesContent":["import React,{useReducer } from 'react';\n\nimport './Input.css';\nimport { validate } from '../../util/validators';\nconst inputReducer = (state,action) => {\n     switch(action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val , action.validators)\n            };\n        case 'TOUCH': \n          return {\n            ...state,\n            isTouched:true\n          };\n        default:\n            return state;\n    }\n}\nconst Input = props => {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n      value: \"\",\n      isTouched: false,\n      isValid: false,\n    });\n\n    const changeHandler = event => {\n        dispatch({\n          type: \"CHANGE\",\n          val: event.target.value,\n          validators: props.validators,\n        });\n\n    };\n\n    const touchHandler = event => {\n      dispatch({\n        type: 'CHANGE',\n        val: event.target.value,\n        validators: props.validators\n      })\n    }\n    const element =\n      props.element === \"input\" ? (\n        <input\n          id={props.id}\n          type={props.type}\n          placeholder={props.placeholder}\n          onChange={changeHandler}\n          onBlur={touchHandler}\n          value={inputState.value}\n        />\n      ) : (\n        <textarea\n          id={props.id}\n          rows={props.rows || 3}\n          onChange={changeHandler}\n          onBlur={touchHandler}\n          value={inputState.value}\n        ></textarea>\n      );\n\n   \n    return <div className={ `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\n        <label htmlFor={props.id}>{props.label}</label>\n        {element}\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n}\n\nexport default Input"]},"metadata":{},"sourceType":"module"}