{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Dev/mern/frontend/src/shared/components/formUI/Input.js\";\nimport React, { useReducer } from 'react';\nimport './Input.css';\nimport { validate } from '../../util/validators';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: '',\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const element = props.element === \"input\" ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, props.label), element, !inputState.isValid && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/kelvin/Dev/mern/frontend/src/shared/components/formUI/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","val","isValid","validators","Input","props","inputState","dispatch","changeHandler","event","target","element","id","placeholder","rows","label","errorText"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,UAAd,QAAgC,OAAhC;AAEA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AAClC,UAAOA,MAAM,CAACC,IAAd;AACG,SAAK,QAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAEF,MAAM,CAACG,GAFX;AAGHC,QAAAA,OAAO,EAAEP,QAAQ,CAACG,MAAM,CAACG,GAAR,EAAcH,MAAM,CAACK,UAArB;AAHd,OAAP;;AAKJ;AACI,aAAON,KAAP;AARP;AAUJ,CAXD;;AAYA,MAAMO,KAAK,GAAGC,KAAK,IAAI;AAEnB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBb,UAAU,CAACE,YAAD,EAAc;AAACI,IAAAA,KAAK,EAAE,EAAR;AAAYE,IAAAA,OAAO,EAAE;AAArB,GAAd,CAAzC;;AAEA,QAAMM,aAAa,GAAGC,KAAK,IAAI;AAC3BF,IAAAA,QAAQ,CAAC;AACPR,MAAAA,IAAI,EAAE,QADC;AAEPE,MAAAA,GAAG,EAAEQ,KAAK,CAACC,MAAN,CAAaV,KAFX;AAGPG,MAAAA,UAAU,EAAEE,KAAK,CAACF;AAHX,KAAD,CAAR;AAMH,GAPD;;AASA,QAAMQ,OAAO,GACXN,KAAK,CAACM,OAAN,KAAkB,OAAlB,gBACE;AACE,IAAA,EAAE,EAAEN,KAAK,CAACO,EADZ;AAEE,IAAA,IAAI,EAAEP,KAAK,CAACN,IAFd;AAGE,IAAA,WAAW,EAAEM,KAAK,CAACQ,WAHrB;AAIE,IAAA,QAAQ,EAAEL,aAJZ;AAKE,IAAA,KAAK,EAAEF,UAAU,CAACN,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBASE;AAAU,IAAA,EAAE,EAAEK,KAAK,CAACO,EAApB;AAAwB,IAAA,IAAI,EAAEP,KAAK,CAACS,IAAN,IAAc,CAA5C;AAA+C,IAAA,QAAQ,EAAEN,aAAzD;AAAwE,IAAA,KAAK,EAAEF,UAAU,CAACN,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ;AAcA,sBAAO;AAAK,IAAA,SAAS,EAAI,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAO,IAAA,OAAO,EAAEK,KAAK,CAACO,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BP,KAAK,CAACU,KAAjC,CADG,EAEFJ,OAFE,EAGF,CAACL,UAAU,CAACJ,OAAZ,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIG,KAAK,CAACW,SAAV,CAHrB,CAAP;AAKH,CAhCD;;AAkCA,eAAeZ,KAAf","sourcesContent":["import React,{useReducer } from 'react';\n\nimport './Input.css';\nimport { validate } from '../../util/validators';\nconst inputReducer = (state,action) => {\n     switch(action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val , action.validators)\n            };\n        default:\n            return state;\n    }\n}\nconst Input = props => {\n\n    const [inputState, dispatch] = useReducer(inputReducer,{value: '', isValid: false});\n\n    const changeHandler = event => {\n        dispatch({\n          type: \"CHANGE\",\n          val: event.target.value,\n          validators: props.validators,\n        });\n\n    };\n\n    const element =\n      props.element === \"input\" ? (\n        <input\n          id={props.id}\n          type={props.type}\n          placeholder={props.placeholder}\n          onChange={changeHandler}\n          value={inputState.value}\n        />\n      ) : (\n        <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} value={inputState.value}></textarea>\n      );\n\n   \n    return <div className={ `form-control`}>\n        <label htmlFor={props.id}>{props.label}</label>\n        {element}\n        {!inputState.isValid && <p>{props.errorText}</p>}\n    </div>\n}\n\nexport default Input"]},"metadata":{},"sourceType":"module"}