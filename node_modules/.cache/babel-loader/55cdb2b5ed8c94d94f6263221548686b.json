{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Dev/mern/frontend/src/places/pages/NewPlaces.js\";\nimport React, { useCallback, useReducer } from 'react';\nimport Input from '../../shared/components/formUI/Input';\nimport Button from '../../shared/components/formUI/Button';\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport './NewPlace.css';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NewPlaces = () => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: \"\",\n        isValid: false\n      }\n    },\n    description: {\n      title: {\n        value: \"\",\n        isValid: false\n      }\n    }\n  });\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"input\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description\",\n    onInput: InputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), \"console.log(formState);\", /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"ADD PLACE\"));\n};\n\nexport default NewPlaces;","map":{"version":3,"sources":["/Users/kelvin/Dev/mern/frontend/src/places/pages/NewPlaces.js"],"names":["React","useCallback","useReducer","Input","Button","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","NewPlaces","formState","dispatch","title","description","InputHandler","id"],"mappings":"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","sourcesContent":["import React,{useCallback, useReducer} from 'react';\nimport Input from '../../shared/components/formUI/Input';\nimport Button from '../../shared/components/formUI/Button';\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport './NewPlace.css';\n\nconst formReducer = (state,action) => {\n  switch (action.type){\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId){\n          formIsValid = formIsValid && action.isValid;\n        }else{\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid : formIsValid\n      };\n      default:\n        return state;\n  }\n};\n\nconst NewPlaces = () => {\n\n  const [formState,dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    description: {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n  });\n  const InputHandler = useCallback((id,value,isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  },[]);\n\n  return (\n    <form className=\"place-form\">\n      <Input\n        id=\"input\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title\"\n        onInput={InputHandler}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(5)]}\n        errorText=\"Please enter a valid description\"\n        onInput={InputHandler}\n      />\n      console.log(formState);\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        ADD PLACE\n      </Button>\n    </form>\n  );\n}\n\nexport default NewPlaces;"]},"metadata":{},"sourceType":"module"}